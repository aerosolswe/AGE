in vec2 texCoord0;
in vec3 normal0;
in vec3 worldPos0;
in mat3 tbnMatrix0;
in vec4 shadowMapCoords0;

uniform vec3 eyePos;
uniform sampler2D diffuse;
uniform sampler2D normalMap;
uniform sampler2D bumpMap;

uniform float specularIntensity;
uniform float specularPower;
uniform float scale;
uniform float bias;
uniform float alpha;
uniform vec3 color;

uniform sampler2D shadowMap;
uniform samplerCube cubeShadowMap;
uniform float shadowVarianceMin;
uniform float shadowLightBleedReduction;

vec3 worldPos;
vec2 textureCoords;
mat3 tbnMatrix;

struct BaseLight{
    vec3 color;
    float intensity;
};

struct Attenuation{
    float constant;
    float linear;
    float exponent;
};

struct PointLight{
    BaseLight base;
    Attenuation atten;
    vec3 position;
    float range;
};

struct SpotLight{
    PointLight pointLight;
    vec3 direction;
    float cutoff;
};

struct DirectionalLight{
    BaseLight base;
    vec3 direction;
};

void init(vec3 wp, vec2 tc, mat3 m){
    worldPos = wp;
    textureCoords = tc;
    tbnMatrix = m;
}

vec4 calcLight(BaseLight base, vec3 direction, vec3 normal){
    float diffuseFactor = dot(normal, -direction);

    vec4 diffuseColor = vec4(0,0,0,0);
    vec4 specularColor = vec4(0,0,0,0);

    if(diffuseFactor > 0)
    {
        diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;

        vec3 directionToEye = normalize(eyePos - worldPos);
        vec3 reflectDirection = normalize(reflect(direction, normal));

        float specularFactor = dot(directionToEye, reflectDirection);
        specularFactor = pow(specularFactor, specularPower);

        if(specularFactor > 0)
        {
            specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
        }
    }

    return diffuseColor + specularColor;
}

vec4 calcPointLight(PointLight pointLight, vec3 normal){
    vec3 lightDirection = worldPos - pointLight.position;
    float distanceToPoint = length(lightDirection);

    if(distanceToPoint > pointLight.range)
        return vec4(0,0,0,0);

    lightDirection = normalize(lightDirection);

    vec4 color = calcLight(pointLight.base, lightDirection, normal);

    float attenuation = pointLight.atten.constant +
                         pointLight.atten.linear * distanceToPoint +
                         pointLight.atten.exponent * distanceToPoint * distanceToPoint +
                         0.0001;

    return color / attenuation;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal){
    vec3 lightDirection = normalize(worldPos - spotLight.pointLight.position);
    float spotFactor = dot(lightDirection, spotLight.direction);

    vec4 color = vec4(0,0,0,0);

    if(spotFactor > spotLight.cutoff){
        color = calcPointLight(spotLight.pointLight, normal) *
                (1.0 - (1.0 - spotFactor)/(1.0 - spotLight.cutoff));
    }

    return color;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal){
    return calcLight(directionalLight.base, -directionalLight.direction, normal);
}

vec2 calcTextureCoords(){
    vec2 texCoords = textureCoords.xy + ((normalize(eyePos - worldPos) * tbnMatrix).xy *
                                (texture(bumpMap, textureCoords.xy).r * scale + bias));

    return texCoords;
}

vec4 calcTextureColor(){
    vec4 textureColor = texture(diffuse, calcTextureCoords());

    if(textureColor.a < 0.5)
       discard;

    return textureColor;
}

vec3 calcNormal(){
    vec3 normal = normalize(tbnMatrix * (2.0 * texture(normalMap, calcTextureCoords()).xyz - 1.0));

    return normal;
}

float sampleShadowMap(sampler2D shadowMap, vec2 coords, float compare){
    return step(compare, texture2D(shadowMap, coords.xy).r);
}

float sampleShadowMapLinear(sampler2D shadowMap, vec2 coords, float compare, vec2 texelSize){
    vec2 pixelPos = coords/texelSize + vec2(0.5);
    vec2 fracPart = fract(pixelPos);
    vec2 startTexel = (pixelPos - fracPart) * texelSize;

    float blTexel = sampleShadowMap(shadowMap, startTexel, compare);
    float brTexel = sampleShadowMap(shadowMap, startTexel + vec2(texelSize.x, 0.0), compare);
    float tlTexel = sampleShadowMap(shadowMap, startTexel + vec2(0.0, texelSize.y), compare);
    float trTexel = sampleShadowMap(shadowMap, startTexel + texelSize, compare);

    float mixA = mix(blTexel, tlTexel, fracPart.y);
    float mixB = mix(brTexel, trTexel, fracPart.y);

    return mix(mixA, mixB, fracPart.x);
}

float sampleShadowMapPCF(sampler2D shadowMap, vec2 coords, float compare, vec2 texelSize){
    const float NUM_SAMPLES = 3.0f;
    const float SAMPLES_START = (NUM_SAMPLES-1.0f)/2.0f;
    const float NUM_SAMPLES_SQUARED = NUM_SAMPLES*NUM_SAMPLES;

    float result = 0.0f;

    for(float y = -SAMPLES_START; y <= SAMPLES_START; y += 1.0f){
        for(float x = -SAMPLES_START; x <= SAMPLES_START; x += 1.0f){
            vec2 coordsOffset = vec2(x,y) * texelSize;
            result += sampleShadowMapLinear(shadowMap, coords + coordsOffset, compare, texelSize);
        }
    }

    return result/NUM_SAMPLES_SQUARED;
}

float linstep(float low, float high, float v){
    return clamp((v-low)/(high-low), 0.0, 1.0);
}

bool inRange(float value){
    return value >= 0.0 && value <= 1.0;
}

float sampleVarianceShadowMap(sampler2D shadowMap, vec2 coords, float compare, float varianceMin, float lightBleedReductionAmount){
    vec2 moments = texture2D(shadowMap, coords.xy).xy;
    float p = step(compare, moments.x);
    float variance = max(moments.y - moments.x * moments.x, varianceMin);

    float d = compare - moments.x;
    float pMax = linstep(lightBleedReductionAmount, 1.0, variance/ (variance + d*d));

    return min(max(p, pMax), 1.0);
}

float calcShadowAmount(sampler2D shadowMap, vec4 initialShadowMapCoords){
    vec3 shadowMapCoords = (initialShadowMapCoords.xyz/initialShadowMapCoords.w);

    if(inRange(shadowMapCoords.z) && inRange(shadowMapCoords.x) && inRange(shadowMapCoords.y)){
        return sampleVarianceShadowMap(shadowMap, shadowMapCoords.xy, shadowMapCoords.z, shadowVarianceMin, shadowLightBleedReduction);
    }else{
        return 1.0;
    }
}

float calcShadowFactor(vec3 lightDirection){
    float sampledDistance = texture(cubeShadowMap, lightDirection).r;

    float distance = length(lightDirection);

    if (distance <= sampledDistance + 0.00001)
        return 1.0;
    else
        return 0.5;
}


